{
  "address": "0x6c1B7e45079ce5D81Fd789911fD674a2962Bd20A",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd9ac116bf998e7611487058fe7d509d2a5061255aea01159236baf4346cdbc10",
  "receipt": {
    "to": null,
    "from": "0x70b5d93d519C52a00839fEd5f87947D4Bc82ef6d",
    "contractAddress": "0x6c1B7e45079ce5D81Fd789911fD674a2962Bd20A",
    "transactionIndex": 0,
    "gasUsed": "383975",
    "logsBloom": "0x
    "blockHash": "0x68df2ce7391d36c28ff65510e4f7aaf02476762f9768062ebbde639c5199541c",
    "transactionHash": "0xd9ac116bf998e7611487058fe7d509d2a5061255aea01159236baf4346cdbc10",
    "logs": [],
    "blockNumber": 8456506,
    "cumulativeGasUsed": "383975",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7c3e2ff0520293f40909a0e110bdf25b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Multicall - Aggregate results from multiple read-only function calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/Multicall.sol\":{\"content\":\"pragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title Multicall - Aggregate results from multiple read-only function calls\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n\\ncontract Multicall {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\\n        blockNumber = block.number;\\n        returnData = new bytes[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n            require(success);\\n            returnData[i] = ret;\\n        }\\n    }\\n    // Helper functions\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(blockNumber);\\n    }\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(block.number - 1);\\n    }\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\n        difficulty = block.difficulty;\\n    }\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n        gaslimit = block.gaslimit;\\n    }\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n        coinbase = block.coinbase;\\n    }\\n}\",\"keccak256\":\"0x1c56222060d14d318c4cca17653ea13a8be9d25ce98a1e654eeb9c7e567095ac\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506105fc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c80630f28c97d1461007d578063252dba421461009b57806327e86d6e146100bc5780634d2301cc146100c457806372425d9d146100d757806386d516e8146100df578063a8b0574e146100e7578063ee82ac5e146100fc575b600080fd5b61008561010f565b6040516100929190610486565b60405180910390f35b6100ae6100a93660046102f7565b610113565b60405161009292919061048f565b61008561028a565b6100856100d23660046102d6565b61029d565b6100856102aa565b6100856102ae565b6100ef6102b2565b6040516100929190610472565b61008561010a36600461043e565b6102b6565b4290565b805143906060906001600160401b0381111561013f57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561017257816020015b606081526020019060019003908161015d5790505b50905060005b8351811015610284576000808583815181106101a457634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b03168684815181106101d957634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040516101f29190610456565b6000604051808303816000865af19150503d806000811461022f576040519150601f19603f3d011682016040523d82523d6000602084013e610234565b606091505b50915091508161024357600080fd5b8084848151811061026457634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050808061027c9061057f565b915050610178565b50915091565b6000610297600143610538565b40905090565b6001600160a01b03163190565b4490565b4590565b4190565b4090565b80356001600160a01b03811681146102d157600080fd5b919050565b6000602082840312156102e7578081fd5b6102f0826102ba565b9392505050565b60006020808385031215610309578182fd5b6001600160401b03833581101561031e578283fd5b8335840185601f820112610330578384fd5b803582811115610342576103426105b0565b61034f848583020161050f565b81815284810190838601875b8481101561042f5781358601601f196040828e038201121561037b578a8bfd5b604051604081018181108b82111715610396576103966105b0565b6040526103a4838c016102ba565b815260408301358a8111156103b7578c8dfd5b8084019350508d603f8401126103cb578b8cfd5b8a8301358a8111156103df576103df6105b0565b6103ef8c84601f8401160161050f565b92508083528e6040828601011115610405578c8dfd5b80604085018d85013782018b018c9052808b0191909152855250928701929087019060010161035b565b50909998505050505050505050565b60006020828403121561044f578081fd5b5035919050565b6000825161046881846020870161054f565b9190910192915050565b6001600160a01b0391909116815260200190565b90815260200190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b8281101561050157878603605f19018452815180518088526104e281888a0189850161054f565b601f01601f1916969096018501955092840192908401906001016104bb565b509398975050505050505050565b6040518181016001600160401b0381118282101715610530576105306105b0565b604052919050565b60008282101561054a5761054a61059a565b500390565b60005b8381101561056a578181015183820152602001610552565b83811115610579576000848401525b50505050565b60006000198214156105935761059361059a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212203f258bf1418e3dca3427c028044ea0fe94d692b8ff8c6af7a3028c6c639184c164736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100785760003560e01c80630f28c97d1461007d578063252dba421461009b57806327e86d6e146100bc5780634d2301cc146100c457806372425d9d146100d757806386d516e8146100df578063a8b0574e146100e7578063ee82ac5e146100fc575b600080fd5b61008561010f565b6040516100929190610486565b60405180910390f35b6100ae6100a93660046102f7565b610113565b60405161009292919061048f565b61008561028a565b6100856100d23660046102d6565b61029d565b6100856102aa565b6100856102ae565b6100ef6102b2565b6040516100929190610472565b61008561010a36600461043e565b6102b6565b4290565b805143906060906001600160401b0381111561013f57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561017257816020015b606081526020019060019003908161015d5790505b50905060005b8351811015610284576000808583815181106101a457634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b03168684815181106101d957634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040516101f29190610456565b6000604051808303816000865af19150503d806000811461022f576040519150601f19603f3d011682016040523d82523d6000602084013e610234565b606091505b50915091508161024357600080fd5b8084848151811061026457634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050808061027c9061057f565b915050610178565b50915091565b6000610297600143610538565b40905090565b6001600160a01b03163190565b4490565b4590565b4190565b4090565b80356001600160a01b03811681146102d157600080fd5b919050565b6000602082840312156102e7578081fd5b6102f0826102ba565b9392505050565b60006020808385031215610309578182fd5b6001600160401b03833581101561031e578283fd5b8335840185601f820112610330578384fd5b803582811115610342576103426105b0565b61034f848583020161050f565b81815284810190838601875b8481101561042f5781358601601f196040828e038201121561037b578a8bfd5b604051604081018181108b82111715610396576103966105b0565b6040526103a4838c016102ba565b815260408301358a8111156103b7578c8dfd5b8084019350508d603f8401126103cb578b8cfd5b8a8301358a8111156103df576103df6105b0565b6103ef8c84601f8401160161050f565b92508083528e6040828601011115610405578c8dfd5b80604085018d85013782018b018c9052808b0191909152855250928701929087019060010161035b565b50909998505050505050505050565b60006020828403121561044f578081fd5b5035919050565b6000825161046881846020870161054f565b9190910192915050565b6001600160a01b0391909116815260200190565b90815260200190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b8281101561050157878603605f19018452815180518088526104e281888a0189850161054f565b601f01601f1916969096018501955092840192908401906001016104bb565b509398975050505050505050565b6040518181016001600160401b0381118282101715610530576105306105b0565b604052919050565b60008282101561054a5761054a61059a565b500390565b60005b8381101561056a578181015183820152602001610552565b83811115610579576000848401525b50505050565b60006000198214156105935761059361059a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212203f258bf1418e3dca3427c028044ea0fe94d692b8ff8c6af7a3028c6c639184c164736f6c63430008000033",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "kind": "dev",
    "methods": {},
    "title": "Multicall - Aggregate results from multiple read-only function calls",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}